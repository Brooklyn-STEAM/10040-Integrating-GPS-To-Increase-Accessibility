<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hand In Hand</title>
    <link rel="shortcut icon" href="/static/logos/favicon.ico">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
  {%include "components/navbar.html.jinja"%}
  
<script>
navigator.geolocation.getCurrentPosition(position=> {
  const{latitude,longitude}=position.coords;
  map.innerHTML='<iframe width="700" height="300" src="https://maps.google.com/maps?q='+latitude+','+longitude+'&amp;z=15&amp;output=embed"></iframe> ';
});
</script>
 

  <div id="googleMap" style="width:100%;height:91vh;" class ="float-end"></div>


<script>


function myMap() {
  var mapProp = {
    center: new google.maps.LatLng(40.655982, -73.929978),
    zoom: 10,
  };
  var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);

  var markers = []; // Store markers for routing
  var directionsService = new google.maps.DirectionsService();
  var directionsRenderer = new google.maps.DirectionsRenderer();
  directionsRenderer.setMap(map); // Attach renderer to the map



if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function (position) {
      var userLocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };
      map.setCenter(userLocation); // Center map on user's location

      var iconurl = "http://maps.google.com/mapfiles/ms/icons/orange-dot.png";
      var userMarker = new google.maps.Marker({
        position: userLocation,
        map: map,
        title: "You are here",
        icon: iconurl
      });

      var infoWindow = new google.maps.InfoWindow({
        content: "You are here",
      });

      userMarker.addListener("click", function () {
        infoWindow.open(map, userMarker);
      });
    });
  } else {
    alert("Geolocation is not supported by this browser.");
  }

  {% for coord in coords %}
    (function() {
      var pin = [{{ coord["latitude"] }}, {{ coord["longitude"] }}];
      var iconUrl = "http://maps.google.com/mapfiles/ms/icons/purple-dot.png"; // Example for red color marker
      var marker = new google.maps.Marker({
        position: new google.maps.LatLng(pin[0], pin[1]),
        map: map,
        title: "PIN",
        icon: iconUrl

      });

      markers.push(marker); // Store markers for routing

      var infoWindowContent = `
        <div class="text-center">
          <h3 class = "special-gothic-expanded-one-regular">{{ coord["name"] }}</h3>
          <p>Address: {{ coord["address"] }}</p>
        </div>
          <div class="text-center">
            <img src="{{ coord['image'] }}" alt="{{ coord['name'] }}" style="width:200px;height:auto; class="rounded mx-auto d-block">
            <br>
            <br>
            <div class="center">
              <a href="/updates/{{coord['id']}}" class="btn add-update"> Add Update</a>
            </div>
          </div>

      `;

      var infoWindow = new google.maps.InfoWindow({
        content: infoWindowContent
      });

      marker.addListener('click', function() {
        infoWindow.open(map, marker);
      });
    })();
  {% endfor %}
}




</script>
<script>
// Note: This example requires that you consent to location sharing when
// prompted by your browser. If you see the error "The Geolocation service
// failed.", it means you probably did not give permission for the browser to
// locate you.
let map, infoWindow;



function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation.",
  );
  infoWindow.open(map);
}


</script>

<script src="https://maps.googleapis.com/maps/api/js?AIzaSyB5gZ5e_XhZS42P61I0hWTvLSNZ9znLNg0&callback=myMap"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <script src="https://code.responsivevoice.org/responsivevoice.js?key=6AqfGK6s"></script>  <!-- replace with KEY-->
<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
<script> 
function getSelectionText() {
    var text = "";
    if (window.getSelection) {
        text = window.getSelection().toString();
    // for Internet Explorer 8 and below. For Blogger, you should use &amp;&amp; instead of &&.
    } else if (document.selection && document.selection.type != "Control") { 
        text = document.selection.createRange().text;
    }
    return text;
}
$(document).ready(function (){ // when the document has completed loading
   $(document).mouseup(function (e){ // attach the mouseup event for all div and pre tags
      setTimeout(function() { // When clicking on a highlighted area, the value stays highlighted until after the mouseup event, and would therefore stil be captured by getSelection. This micro-timeout solves the issue. 
         responsiveVoice.cancel(); // stop anything currently being spoken
         responsiveVoice.speak(getSelectionText()); //speak the text as returned by getSelectionText
      }, 1);
   });
});
</script>
</body>
</html>