<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hand In Hand</title>
  <link rel="shortcut icon" href="/static/logos/favicon.ico">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="/static/styles.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"></script>
   <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Karla:ital,wght@0,200..800;1,200..800&display=swap');
    </style>
    <script src="https://cdn.userway.org/widget.js" data-account="EhJYDcVyH5"></script>
</head>

<body>
  {%include "components/navbar.html.jinja"%}

  <script>
    navigator.geolocation.getCurrentPosition(position => {
      const { latitude, longitude } = position.coords;
      map.innerHTML = '<iframe width="700" height="300" src="https://maps.google.com/maps?q=' + latitude + ',' + longitude + '&amp;z=15&amp;output=embed"></iframe> ';
    });
  </script>


  <div id="googleMap" style="width:100%;height:91vh;" class="float-end"></div>

  <div id="map-legend" class ="wow animate__fadeInBottomLeft">
    <h4 class="special-gothic-expanded-one-regular">Map Key</h4>

    <div class="karla-font fs-6"><img src="http://maps.google.com/mapfiles/ms/icons/orange-dot.png" alt="Orange colored pin used to represent your current location"> You</div>
    <div><img src="http://maps.google.com/mapfiles/ms/icons/green-dot.png" alt="Green colored pin used to represent your dropped pins on the map"> Your Pins</div>
    <div class="karla-font fs-6"><img src="http://maps.google.com/mapfiles/ms/icons/purple-dot.png" alt="Purple colored pin used to represent that a location is accessibile"> Accessible</div>
    <div class="karla-font fs-6"><img src="http://maps.google.com/mapfiles/ms/icons/red-dot.png" alt="Red colored pin used to represent that a location is inaccessibile"> Inaccessible</div>

  </div>


<script>
function myMap() {
  var mapProp = {
    center: new google.maps.LatLng(40.655982, -73.929978),
    zoom: 10,
  };
  var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);

  var markers = [];
  var directionsService = new google.maps.DirectionsService();
  var directionsRenderer = new google.maps.DirectionsRenderer();
  directionsRenderer.setMap(map);

  // User location
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function (position) {
      var userLocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };
      map.setCenter(userLocation);
      var iconurl = "http://maps.google.com/mapfiles/ms/icons/orange-dot.png";
      var userMarker = new google.maps.Marker({
        position: userLocation,
        map: map,
        title: "You are here",
        icon: iconurl
      });

      var infoWindow = new google.maps.InfoWindow({
        content: "You are here",
      });

      userMarker.addListener("click", function () {
        infoWindow.open(map, userMarker);
      });
    });
  } else {
    alert("Geolocation is not supported by this browser.");
  }

  // Main pins from database
  {% for coord in coords %}
  (function () {
    var pin = [{{ coord["latitude"] }}, {{ coord["longitude"] }}];

    var iconUrl = "";
    {% if coord["accessable"] == 0 %}
      iconUrl = "http://maps.google.com/mapfiles/ms/icons/red-dot.png";
    {% else %}
      iconUrl = "http://maps.google.com/mapfiles/ms/icons/purple-dot.png";
    {% endif %}

    var marker = new google.maps.Marker({
      position: new google.maps.LatLng(pin[0], pin[1]),
      map: map,
      title: "PIN",
      icon: iconUrl
    });

    markers.push(marker);

    var infoWindowContent = `

    <div class="text-center">
      <h3 class="special-gothic-expanded-one-regular">{{ coord["name"] }}</h3>
      <p class="karla-font fs-6">Address: {{ coord["address"] }}</p>
    </div>
    <div class="text-center">
      <img src="{{ coord['image'] }}" alt="{{ coord['name'] }}" style="width:200px;height:auto;" alt="Image of location stated"class="rounded mx-auto d-block">
      <br><br>

      <div class="center">

        <a href="/updates/{{ coord['id'] }}" class="btn add-update karla-font o-text">View Location</a>
  
    `;

    var infoWindow = new google.maps.InfoWindow({
      content: infoWindowContent
    });

    marker.addListener('click', function () {
      infoWindow.open(map, marker);
    });
  })();
  {% endfor %}

  // User-added pins
  {% for pin in pins %}
  (function () {
    var marker = new google.maps.Marker({
      position: new google.maps.LatLng({{ pin["latitude"] }}, {{ pin["longitude"] }}),
      map: map,
      title: "User Pin",
      icon: "http://maps.google.com/mapfiles/ms/icons/green-dot.png"
    });

   var infoWindow = new google.maps.InfoWindow({
    content: `
      <div class="text-center">
        <h3>Your Pin</h3>
        <a href = "/delete_pin/{{pin['id']}}" class="btn btn-danger btn-sm mt-2">Delete</a>
      </div>
    `
  });

    marker.addListener("click", function () {
      infoWindow.open(map, marker);
    });
  })();
  {% endfor %}

  // Click-to-add new pin
  map.addListener("click", function(event) {
    const lat = event.latLng.lat();
    const lng = event.latLng.lng();

    if (confirm("Do you want to add a pin here?")) {
      fetch("/add_pin", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          latitude: lat,
          longitude: lng
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          new google.maps.Marker({
            position: { lat: lat, lng: lng },
            map: map,
            icon: "http://maps.google.com/mapfiles/ms/icons/green-dot.png",
            title: "User Pin"
          });
        } else {
          alert("Failed to add pin: " + data.message);
        }
      });
    }
  });
}
</script>


  <script>
    // Note: This example requires that you consent to location sharing when
    // prompted by your browser. If you see the error "The Geolocation service
    // failed.", it means you probably did not give permission for the browser to
    // locate you.
    let map, infoWindow;



    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
      infoWindow.setPosition(pos);
      infoWindow.setContent(
        browserHasGeolocation
          ? "Error: The Geolocation service failed."
          : "Error: Your browser doesn't support geolocation.",
      );
      infoWindow.open(map);
    }


  </script>

  <script src="https://maps.googleapis.com/maps/api/js?AIzaSyB5gZ5e_XhZS42P61I0hWTvLSNZ9znLNg0&callback=myMap"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>

  <script src="https://code.responsivevoice.org/responsivevoice.js?key=6AqfGK6s"></script> <!-- replace with KEY-->
  <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
  <script>
    function getSelectionText() {
      var text = "";
      if (window.getSelection) {
        text = window.getSelection().toString();
        // for Internet Explorer 8 and below. For Blogger, you should use &amp;&amp; instead of &&.
      } else if (document.selection && document.selection.type != "Control") {
        text = document.selection.createRange().text;
      }
      return text;
    }
    $(document).ready(function () { // when the document has completed loading
      $(document).mouseup(function (e) { // attach the mouseup event for all div and pre tags
        setTimeout(function () { // When clicking on a highlighted area, the value stays highlighted until after the mouseup event, and would therefore stil be captured by getSelection. This micro-timeout solves the issue. 
          responsiveVoice.cancel(); // stop anything currently being spoken
          responsiveVoice.speak(getSelectionText()); //speak the text as returned by getSelectionText
        }, 1);
      });
    });
  </script>

  <script>
        var wow = new WOW({
            boxClass: 'wow',
            animateClass: 'animate__animated'
        })
        wow.init();
    </script>
</body>

</html>